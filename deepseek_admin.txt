<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CashReward Admin Panel</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://unpkg.com/lucide@latest"></script>
    <style>
        body { font-family: 'Inter', sans-serif; background-color: #f3f4f6; }
        .sidebar { background-color: #1f2937; color: #d1d5db; }
        .sidebar a { border-left: 3px solid transparent; transition: all 0.2s; }
        .sidebar a:hover { background-color: #374151; }
        .sidebar a.active { background-color: #4f46e5; color: white; border-left-color: #818cf8; }
        .stat-card { background-color: white; border-radius: 0.5rem; box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06); }
        .page { display: none; }
        .page.active { display: block; animation: fadeIn 0.5s; }
        .btn { padding: 0.5rem 1rem; border-radius: 0.375rem; font-weight: 600; transition: all 0.2s; }
        .btn:active { transform: scale(0.95); }
        .btn-primary { background-color: #4f46e5; color: white; }
        .btn-primary:hover { background-color: #4338ca; }
        .btn-success { background-color: #10b981; color: white; }
        .btn-danger { background-color: #ef4444; color: white; }
        .btn-warning { background-color: #f59e0b; color: white; }
        .btn-info { background-color: #3b82f6; color: white; }
        table { width: 100%; border-collapse: collapse; }
        th, td { padding: 0.75rem; text-align: left; border-bottom: 1px solid #e5e7eb; }
        th { background-color: #f9fafb; }
        .status-pending { background-color: #fef3c7; color: #92400e; padding: 0.25rem 0.5rem; border-radius: 0.25rem; font-size: 0.875rem; }
        .status-approved { background-color: #d1fae5; color: #065f46; padding: 0.25rem 0.5rem; border-radius: 0.25rem; font-size: 0.875rem; }
        .status-rejected { background-color: #fee2e2; color: #991b1b; padding: 0.25rem 0.5rem; border-radius: 0.25rem; font-size: 0.875rem; }
        @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
    </style>
</head>
<body>

    <!-- Admin Login -->
    <div id="admin-login-view" class="min-h-screen flex items-center justify-center bg-gray-100">
        <div class="w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow-md">
            <h1 class="text-3xl font-bold text-center text-gray-900">Admin Panel Login</h1>
            <input id="admin-email" type="email" placeholder="Admin Email" class="w-full px-4 py-2 border rounded-lg">
            <input id="admin-password" type="password" placeholder="Password" class="w-full px-4 py-2 border rounded-lg">
            <button id="admin-login-btn" class="w-full btn btn-primary">Login</button>
        </div>
    </div>

    <!-- Main Admin Dashboard -->
    <div id="admin-dashboard" class="hidden">
        <div class="flex h-screen">
            <!-- Sidebar -->
            <aside class="sidebar w-64 flex-shrink-0">
                <div class="p-4 text-2xl font-bold text-white">CashReward</div>
                <nav class="mt-8">
                    <a href="#" class="nav-link block py-3 px-4" data-page="dashboard-page"><i data-lucide="home" class="inline-block w-5 h-5 mr-2"></i>Dashboard</a>
                    <a href="#" class="nav-link block py-3 px-4" data-page="users-page"><i data-lucide="users" class="inline-block w-5 h-5 mr-2"></i>Users</a>
                    <a href="#" class="nav-link block py-3 px-4" data-page="withdrawals-page"><i data-lucide="dollar-sign" class="inline-block w-5 h-5 mr-2"></i>Withdrawals</a>
                    <a href="#" class="nav-link block py-3 px-4" data-page="withdrawal-history-page"><i data-lucide="history" class="inline-block w-5 h-5 mr-2"></i>Withdrawal History</a>
                    <a href="#" class="nav-link block py-3 px-4" data-page="jobs-analytics-page"><i data-lucide="bar-chart-3" class="inline-block w-5 h-5 mr-2"></i>Jobs Analytics</a>
                    <!-- Added Pro Jobs Management -->
                    <a href="#" class="nav-link block py-3 px-4" data-page="pro-jobs-page"><i data-lucide="award" class="inline-block w-5 h-5 mr-2"></i>Pro Jobs Management</a>
                    <a href="#" class="nav-link block py-3 px-4" data-page="notifications-page"><i data-lucide="send" class="inline-block w-5 h-5 mr-2"></i>Notifications</a>
                    <a href="#" class="nav-link block py-3 px-4" data-page="settings-page"><i data-lucide="settings" class="inline-block w-5 h-5 mr-2"></i>Settings</a>
                    <a href="#" id="admin-logout-btn" class="block py-3 px-4 mt-8"><i data-lucide="log-out" class="inline-block w-5 h-5 mr-2"></i>Logout</a>
                </nav>
            </aside>

            <!-- Main Content -->
            <main class="flex-1 p-8 overflow-y-auto">
                <!-- Dashboard Page -->
                <div id="dashboard-page" class="page">
                    <h1 class="text-3xl font-bold mb-6">Dashboard</h1>
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        <div class="stat-card p-6"><h2 class="text-gray-500 text-lg">Total Users</h2><p id="total-users" class="text-4xl font-bold mt-2">0</p></div>
                        <div class="stat-card p-6"><h2 class="text-gray-500 text-lg">Pending Withdrawals</h2><p id="pending-withdrawals" class="text-4xl font-bold mt-2">0</p></div>
                        <div class="stat-card p-6"><h2 class="text-gray-500 text-lg">Jobs Completed Today</h2><p id="jobs-completed-today" class="text-4xl font-bold mt-2">0</p></div>
                        <div class="stat-card p-6"><h2 class="text-gray-500 text-lg">Total Ads Watched Today</h2><p id="ads-watched-today" class="text-4xl font-bold mt-2">0</p></div>
                        <div class="stat-card p-6"><h2 class="text-gray-500 text-lg">Coins Earned Today</h2><p id="coins-earned-today" class="text-4xl font-bold mt-2">0</p></div>
                        <!-- Added Pro Jobs Stats -->
                        <div class="stat-card p-6"><h2 class="text-gray-500 text-lg">Pending Pro Jobs</h2><p id="pending-pro-jobs" class="text-4xl font-bold mt-2">0</p></div>
                    </div>
                </div>

                <!-- Users Page -->
                <div id="users-page" class="page">
                    <h1 class="text-3xl font-bold mb-6">User Management</h1>
                    <div class="bg-white shadow rounded-lg overflow-x-auto">
                        <table class="min-w-full">
                            <thead><tr><th>Name</th><th>Email</th><th>Balance</th><th>Status</th><th>Actions</th><th>Balance Actions</th></tr></thead>
                            <tbody id="users-table-body"></tbody>
                        </table>
                    </div>
                </div>

                <!-- Withdrawals Page -->
                <div id="withdrawals-page" class="page">
                    <h1 class="text-3xl font-bold mb-6">Withdrawal Requests</h1>
                    <div class="bg-white shadow rounded-lg overflow-x-auto">
                        <table>
                            <thead><tr><th>User Name</th><th>Amount</th><th>Method</th><th>Details</th><th>Requested At</th><th>Actions</th></tr></thead>
                            <tbody id="withdrawals-table-body"></tbody>
                        </table>
                    </div>
                </div>

                <!-- Withdrawal History page -->
                <div id="withdrawal-history-page" class="page">
                    <h1 class="text-3xl font-bold mb-6">Withdrawal History</h1>
                    
                    <!-- Summary Stats -->
                    <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
                        <div class="stat-card p-4">
                            <h3 class="text-gray-500 text-sm">Total Withdrawals</h3>
                            <p id="total-withdrawals-count" class="text-2xl font-bold mt-1">0</p>
                        </div>
                        <div class="stat-card p-4">
                            <h3 class="text-gray-500 text-sm">Approved Withdrawals</h3>
                            <p id="approved-withdrawals-count" class="text-2xl font-bold mt-1 text-green-600">0</p>
                        </div>
                        <div class="stat-card p-4">
                            <h3 class="text-gray-500 text-sm">Rejected Withdrawals</h3>
                            <p id="rejected-withdrawals-count" class="text-2xl font-bold mt-1 text-red-600">0</p>
                        </div>
                        <div class="stat-card p-4">
                            <h3 class="text-gray-500 text-sm">Total Amount Paid</h3>
                            <p id="total-amount-paid" class="text-2xl font-bold mt-1">â‚¹0</p>
                        </div>
                    </div>

                    <!-- User Withdrawal Summary -->
                    <div class="bg-white shadow rounded-lg overflow-x-auto mb-6">
                        <div class="p-4 border-b">
                            <h2 class="text-xl font-semibold">User Withdrawal Summary</h2>
                        </div>
                        <table class="min-w-full">
                            <thead>
                                <tr>
                                    <th>User Name</th>
                                    <th>Total Withdrawals</th>
                                    <th>Approved</th>
                                    <th>Rejected</th>
                                    <th>Total Amount</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="user-withdrawal-summary-body"></tbody>
                        </table>
                    </div>

                    <!-- All Withdrawal History -->
                    <div class="bg-white shadow rounded-lg overflow-x-auto">
                        <div class="p-4 border-b">
                            <h2 class="text-xl font-semibold">All Withdrawal History</h2>
                        </div>
                        <table class="min-w-full">
                            <thead>
                                <tr>
                                    <th>User Name</th>
                                    <th>Amount</th>
                                    <th>Method</th>
                                    <th>Payment Details</th>
                                    <th>Status</th>
                                    <th>Requested At</th>
                                    <th>Processed At</th>
                                </tr>
                            </thead>
                            <tbody id="withdrawal-history-table-body"></tbody>
                        </table>
                    </div>
                </div>

                <!-- Jobs Analytics Page -->
                <div id="jobs-analytics-page" class="page">
                    <h1 class="text-3xl font-bold mb-6">Daily Jobs Analytics</h1>
                    
                    <!-- Summary Stats -->
                    <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
                        <div class="stat-card p-4">
                            <h3 class="text-gray-500 text-sm">Today's Jobs</h3>
                            <p id="analytics-jobs-today" class="text-2xl font-bold mt-1">0</p>
                        </div>
                        <div class="stat-card p-4">
                            <h3 class="text-gray-500 text-sm">Total Ads Watched</h3>
                            <p id="analytics-ads-today" class="text-2xl font-bold mt-1">0</p>
                        </div>
                        <div class="stat-card p-4">
                            <h3 class="text-gray-500 text-sm">Coins Distributed</h3>
                            <p id="analytics-coins-today" class="text-2xl font-bold mt-1">0</p>
                        </div>
                        <div class="stat-card p-4">
                            <h3 class="text-gray-500 text-sm">Active Users</h3>
                            <p id="analytics-active-users" class="text-2xl font-bold mt-1">0</p>
                        </div>
                    </div>

                    <!-- User Activity Table -->
                    <div class="bg-white shadow rounded-lg overflow-x-auto mb-6">
                        <div class="p-4 border-b">
                            <h2 class="text-xl font-semibold">User Activity Today</h2>
                        </div>
                        <table class="min-w-full">
                            <thead>
                                <tr>
                                    <th>User Name</th>
                                    <th>Jobs Completed</th>
                                    <th>Ads Watched</th>
                                    <th>Coins Earned</th>
                                    <th>Last Activity</th>
                                </tr>
                            </thead>
                            <tbody id="user-activity-table-body"></tbody>
                        </table>
                    </div>

                    <!-- Recent Job Completions -->
                    <div class="bg-white shadow rounded-lg overflow-x-auto">
                        <div class="p-4 border-b">
                            <h2 class="text-xl font-semibold">Recent Job Completions</h2>
                        </div>
                        <table class="min-w-full">
                            <thead>
                                <tr>
                                    <th>User</th>
                                    <th>Job ID</th>
                                    <th>Coins Earned</th>
                                    <th>Completed At</th>
                                </tr>
                            </thead>
                            <tbody id="recent-jobs-table-body"></tbody>
                        </table>
                    </div>
                </div>

                <!-- Pro Jobs Management Page -->
                <div id="pro-jobs-page" class="page">
                    <h1 class="text-3xl font-bold mb-6">Pro Jobs Management</h1>
                    
                    <!-- Summary Stats -->
                    <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
                        <div class="stat-card p-4">
                            <h3 class="text-gray-500 text-sm">Total Pro Jobs</h3>
                            <p id="total-pro-jobs-count" class="text-2xl font-bold mt-1">0</p>
                        </div>
                        <div class="stat-card p-4">
                            <h3 class="text-gray-500 text-sm">Pending Submissions</h3>
                            <p id="pending-pro-jobs-count" class="text-2xl font-bold mt-1 text-yellow-600">0</p>
                        </div>
                        <div class="stat-card p-4">
                            <h3 class="text-gray-500 text-sm">Approved Submissions</h3>
                            <p id="approved-pro-jobs-count" class="text-2xl font-bold mt-1 text-green-600">0</p>
                        </div>
                        <div class="stat-card p-4">
                            <h3 class="text-gray-500 text-sm">Rejected Submissions</h3>
                            <p id="rejected-pro-jobs-count" class="text-2xl font-bold mt-1 text-red-600">0</p>
                        </div>
                    </div>

                    <!-- Pro Job Links Management -->
                    <div class="bg-white shadow rounded-lg overflow-x-auto mb-6">
                        <div class="p-4 border-b">
                            <h2 class="text-xl font-semibold">Pro Job Links Management</h2>
                        </div>
                        <div class="p-4">
                            <p class="text-gray-600 mb-4">Manage links for all 10 Pro Job buttons. Users will be redirected to these links when they click on Pro Job buttons.</p>
                            
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                                <div class="space-y-3" id="pro-job-links-1-5">
                                    <!-- Pro Jobs 1-5 will be populated here -->
                                </div>
                                <div class="space-y-3" id="pro-job-links-6-10">
                                    <!-- Pro Jobs 6-10 will be populated here -->
                                </div>
                            </div>
                            
                            <div class="flex space-x-4">
                                <button id="save-pro-job-links-btn" class="btn btn-primary">Save All Pro Job Links</button>
                                <button id="clear-all-pro-links-btn" class="btn btn-warning">Clear All Links</button>
                            </div>
                        </div>
                    </div>

                    <!-- Pending Pro Job Submissions -->
                    <div class="bg-white shadow rounded-lg overflow-x-auto mb-6">
                        <div class="p-4 border-b">
                            <h2 class="text-xl font-semibold">Pending Pro Job Submissions</h2>
                        </div>
                        <table class="min-w-full">
                            <thead>
                                <tr>
                                    <th>User Name</th>
                                    <th>Job ID</th>
                                    <th>Before Screenshot</th>
                                    <th>After Screenshot</th>
                                    <th>Submitted At</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="pending-pro-jobs-body"></tbody>
                        </table>
                    </div>

                    <!-- All Pro Job Submissions -->
                    <div class="bg-white shadow rounded-lg overflow-x-auto">
                        <div class="p-4 border-b">
                            <h2 class="text-xl font-semibold">All Pro Job Submissions</h2>
                        </div>
                        <table class="min-w-full">
                            <thead>
                                <tr>
                                    <th>User Name</th>
                                    <th>Job ID</th>
                                    <th>Status</th>
                                    <th>Submitted At</th>
                                    <th>Processed At</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="all-pro-jobs-body"></tbody>
                        </table>
                    </div>
                </div>

                <!-- Notifications Page -->
                <div id="notifications-page" class="page">
                    <h1 class="text-3xl font-bold mb-6">Send Notification</h1>
                    <div class="stat-card p-6 max-w-lg">
                        <div class="mb-4"><label for="notification-title" class="block font-semibold mb-2">Title</label><input type="text" id="notification-title" class="w-full px-4 py-2 border rounded-lg"></div>
                        <div class="mb-6"><label for="notification-message" class="block font-semibold mb-2">Message</label><textarea id="notification-message" rows="4" class="w-full px-4 py-2 border rounded-lg"></textarea></div>
                        <button id="send-notification-btn" class="btn btn-primary">Send to All Users</button>
                    </div>
                </div>

                <!-- Settings Page -->
                <div id="settings-page" class="page">
                    <h1 class="text-3xl font-bold mb-6">App Settings</h1>
                    
                    <!-- General Settings -->
                    <div class="stat-card p-6 max-w-lg mb-8">
                        <h2 class="text-xl font-semibold mb-4">General Settings</h2>
                        <div class="mb-6"><label for="min-withdrawal" class="block font-semibold mb-2">Minimum Withdrawal (Coins)</label><input type="number" id="min-withdrawal" class="w-full px-4 py-2 border rounded-lg"></div>
                        <div class="mb-6"><label for="daily-ad-limit" class="block font-semibold mb-2">Daily Ad Watch Limit</label><input type="number" id="daily-ad-limit" class="w-full px-4 py-2 border rounded-lg"></div>
                        <div class="mb-6">
                            <label class="block font-semibold mb-2">Coin Value</label>
                            <div class="flex items-center space-x-2">
                                <input type="number" id="coin-value-coins" class="w-full px-4 py-2 border rounded-lg">
                                <span>Coins = â‚¹</span>
                                <input type="number" id="coin-value-inr" class="w-full px-4 py-2 border rounded-lg">
                            </div>
                        </div>
                        <div class="mb-6"><label class="block font-semibold mb-2">Payment Methods (comma-separated)</label><input type="text" id="payment-methods" class="w-full px-4 py-2 border rounded-lg" placeholder="e.g. UPI,Paytm,Bkash,Nagad"></div>
                        <button id="save-settings-btn" class="btn btn-primary">Save Settings</button>
                    </div>

                    <!-- Daily Job Links Management -->
                    <div class="stat-card p-6">
                        <h2 class="text-xl font-semibold mb-4">Daily Job Links Management</h2>
                        <p class="text-gray-600 mb-4">Manage links for all 20 daily job buttons. Users will be redirected to these links when they click on job buttons.</p>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                            <div class="space-y-3" id="job-links-1-10">
                                <!-- Jobs 1-10 will be populated here -->
                            </div>
                            <div class="space-y-3" id="job-links-11-20">
                                <!-- Jobs 11-20 will be populated here -->
                            </div>
                        </div>
                        
                        <div class="flex space-x-4">
                            <button id="save-job-links-btn" class="btn btn-primary">Save All Job Links</button>
                            <button id="clear-all-links-btn" class="btn btn-warning">Clear All Links</button>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>
    
    <!-- Alert Modal -->
    <div id="custom-alert" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div class="bg-white rounded-lg p-6 w-full max-w-sm text-center shadow-xl">
            <p id="alert-message" class="mb-4 text-gray-800"></p>
            <button id="alert-ok-btn" class="btn btn-primary px-6">OK</button>
        </div>
    </div>

    <!-- Confirmation Modal -->
    <div id="custom-confirm" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div class="bg-white rounded-lg p-6 w-full max-w-sm text-center shadow-xl">
            <p id="confirm-message" class="mb-6 text-gray-800"></p>
            <div class="flex justify-center space-x-4">
                <button id="confirm-cancel-btn" class="btn bg-gray-200 text-gray-800 px-6">Cancel</button>
                <button id="confirm-ok-btn" class="btn btn-danger px-6">Confirm</button>
            </div>
        </div>
    </div>

    <!-- Balance Edit Modal -->
    <div id="balance-edit-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div class="bg-white rounded-lg p-6 w-full max-w-md shadow-xl">
            <h3 class="text-lg font-semibold mb-4">Edit User Balance</h3>
            <div class="mb-4">
                <label class="block text-sm font-medium mb-2">User Name</label>
                <input type="text" id="edit-balance-username" class="w-full px-3 py-2 border rounded-lg bg-gray-100" readonly>
            </div>
            <div class="mb-4">
                <label class="block text-sm font-medium mb-2">Current Balance</label>
                <input type="number" id="edit-balance-current" class="w-full px-3 py-2 border rounded-lg bg-gray-100" readonly>
            </div>
            <div class="mb-4">
                <label class="block text-sm font-medium mb-2">New Balance</label>
                <input type="number" id="edit-balance-new" class="w-full px-3 py-2 border rounded-lg" placeholder="Enter new balance">
            </div>
            <div class="mb-6">
                <label class="block text-sm font-medium mb-2">Reason (Optional)</label>
                <input type="text" id="edit-balance-reason" class="w-full px-3 py-2 border rounded-lg" placeholder="Admin adjustment, bonus, etc.">
            </div>
            <div class="flex justify-end space-x-4">
                <button id="balance-edit-cancel-btn" class="btn bg-gray-200 text-gray-800 px-4">Cancel</button>
                <button id="balance-edit-save-btn" class="btn btn-primary px-4">Update Balance</button>
            </div>
        </div>
    </div>

    <!-- User Withdrawal Details Modal -->
    <div id="user-withdrawal-details-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div class="bg-white rounded-lg p-6 w-full max-w-4xl max-h-[80vh] overflow-y-auto shadow-xl">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold">User Withdrawal Details</h3>
                <button id="close-withdrawal-details-btn" class="text-gray-500 hover:text-gray-700">
                    <i data-lucide="x" class="w-6 h-6"></i>
                </button>
            </div>
            <div class="mb-4">
                <h4 class="font-medium mb-2">User: <span id="withdrawal-details-username"></span></h4>
            </div>
            <div class="overflow-x-auto">
                <table class="min-w-full">
                    <thead>
                        <tr class="bg-gray-50">
                            <th class="px-4 py-2 text-left">Amount</th>
                            <th class="px-4 py-2 text-left">Method</th>
                            <th class="px-4 py-2 text-left">Status</th>
                            <th class="px-4 py-2 text-left">Requested At</th>
                            <th class="px-4 py-2 text-left">Processed At</th>
                        </tr>
                    </thead>
                    <tbody id="user-withdrawal-details-body"></tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Pro Job Screenshots Modal -->
    <div id="pro-job-screenshots-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div class="bg-white rounded-lg p-6 w-full max-w-4xl max-h-[80vh] overflow-y-auto shadow-xl">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold">Pro Job Screenshots</h3>
                <button onclick="closeProJobScreenshotsModal()" class="text-gray-500 hover:text-gray-700">
                    <i data-lucide="x" class="w-6 h-6"></i>
                </button>
            </div>
            <div class="mb-4">
                <h4 class="font-medium mb-2">User: <span id="pro-job-user-name"></span></h4>
                <p class="text-gray-600">Job ID: <span id="pro-job-id"></span></p>
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                <div>
                    <h4 class="font-medium mb-2">Before Sign Up Screenshot</h4>
                    <img id="before-screenshot-img" src="" alt="Before Screenshot" class="w-full h-auto rounded-lg border">
                    <a id="before-screenshot-link" href="#" target="_blank" class="block mt-2 text-blue-600 hover:underline">View Original</a>
                </div>
                <div>
                    <h4 class="font-medium mb-2">After Sign Up Screenshot</h4>
                    <img id="after-screenshot-img" src="" alt="After Screenshot" class="w-full h-auto rounded-lg border">
                    <a id="after-screenshot-link" href="#" target="_blank" class="block mt-2 text-blue-600 hover:underline">View Original</a>
                </div>
            </div>
            <div class="flex justify-end space-x-4">
                <button onclick="rejectProJobSubmission()" class="btn btn-danger">Reject</button>
                <button onclick="approveProJobSubmission()" class="btn btn-success">Approve</button>
            </div>
        </div>
    </div>

    <script type="module">
        const firebaseConfig = {
            apiKey: "AIzaSyDBnaXav_M1C45PHs78D7n1QlnR1G9e6SY",
            authDomain: "arningappbot-a7aca.firebaseapp.com",
            projectId: "arningappbot-a7aca",
            storageBucket: "arningappbot-a7aca.firebasestorage.app",
            messagingSenderId: "357948746475",
            appId: "1:357948746475:web:e58919995bb8a066d9ecae"
        };
        
        const ADMIN_UIDS = ["L3p07Wqz5HhmjCCqqhSuXPfnwAI3"]; 

        import { initializeApp } from "https://www.gstatic.com/firebasejs/9.23.0/firebase-app.js";
        import { getAuth, onAuthStateChanged, signInWithEmailAndPassword, signOut } from "https://www.gstatic.com/firebasejs/9.23.0/firebase-auth.js";
        import { getFirestore, collection, doc, getDoc, setDoc, updateDoc, query, where, onSnapshot, addDoc, serverTimestamp, orderBy, limit, getDocs, deleteDoc } from "https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore.js";

        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);

        const loginView = document.getElementById('admin-login-view');
        const dashboardView = document.getElementById('admin-dashboard');

        let currentProJobSubmission = null;

        window.onload = () => {
            lucide.createIcons();
            setupEventListeners();
            onAuthStateChanged(auth, (user) => {
                if (user && ADMIN_UIDS.includes(user.uid)) {
                    loginView.style.display = 'none';
                    dashboardView.style.display = 'block';
                    navigateTo('dashboard-page');
                    loadDashboardData();
                    loadUsers();
                    loadWithdrawals();
                    loadWithdrawalHistory();
                    loadJobsAnalytics();
                    loadSettings();
                    loadProJobs();
                    
                    // Set up real-time listeners for Pro Jobs
                    setupProJobListeners();
                } else {
                    loginView.style.display = 'flex';
                    dashboardView.style.display = 'none';
                }
            });
        };

        function navigateTo(pageId) {
            document.querySelectorAll('.page').forEach(p => p.classList.remove('active'));
            document.getElementById(pageId).classList.add('active');
            document.querySelectorAll('.nav-link').forEach(link => {
                link.classList.remove('active');
                if (link.dataset.page === pageId) link.classList.add('active');
            });
            
            if (pageId === 'pro-jobs-page') {
                loadProJobs();
            }
        }

        function setupEventListeners() {
            document.getElementById('admin-login-btn').addEventListener('click', handleAdminLogin);
            document.getElementById('admin-logout-btn').addEventListener('click', () => signOut(auth));
            document.getElementById('save-settings-btn').addEventListener('click', saveSettings);
            document.getElementById('send-notification-btn').addEventListener('click', sendNotification);
            document.getElementById('save-job-links-btn').addEventListener('click', saveDailyJobLinks);
            document.getElementById('clear-all-links-btn').addEventListener('click', clearAllJobLinks);
            document.getElementById('balance-edit-cancel-btn').addEventListener('click', closeBalanceEditModal);
            document.getElementById('balance-edit-save-btn').addEventListener('click', saveUserBalance);
            document.getElementById('close-withdrawal-details-btn').addEventListener('click', closeWithdrawalDetailsModal);
            document.getElementById('save-pro-job-links-btn').addEventListener('click', saveProJobLinks);
            document.getElementById('clear-all-pro-links-btn').addEventListener('click', clearAllProJobLinks);
            document.querySelectorAll('.nav-link').forEach(link => {
                link.addEventListener('click', (e) => { e.preventDefault(); navigateTo(link.dataset.page); });
            });
        }

        async function handleAdminLogin() {
            const email = document.getElementById('admin-email').value;
            const password = document.getElementById('admin-password').value;
            try {
                const userCredential = await signInWithEmailAndPassword(auth, email, password);
                if (!ADMIN_UIDS.includes(userCredential.user.uid)) {
                    await signOut(auth);
                    showAlert("Aap is panel ko access karne ke liye authorized nahi hain.");
                }
            } catch (error) { showAlert(error.message); }
        }

        function loadDashboardData() {
            onSnapshot(collection(db, "users"), snap => { document.getElementById('total-users').textContent = snap.size; });
            onSnapshot(query(collection(db, "withdrawals"), where("status", "==", "pending")), snap => { document.getElementById('pending-withdrawals').textContent = snap.size; });
            onSnapshot(query(collection(db, "pro_jobs_submissions"), where("status", "==", "pending")), snap => { document.getElementById('pending-pro-jobs').textContent = snap.size; });

            // Load today's job completions
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            onSnapshot(query(collection(db, "daily_jobs_completed"), where("completedAt", ">=", today)), snap => {
                document.getElementById('jobs-completed-today').textContent = snap.size;
                let totalCoins = 0;
                snap.forEach(doc => {
                    totalCoins += doc.data().coinsEarned || 0;
                });
                document.getElementById('coins-earned-today').textContent = totalCoins;
            });

            // Load today's ad watch count
            onSnapshot(collection(db, "users"), snap => {
                let totalAds = 0;
                const todayStr = new Date().toISOString().split('T')[0];
                snap.forEach(doc => {
                    const userData = doc.data();
                    if (userData.lastAdWatchDate === todayStr) {
                        totalAds += userData.dailyAdCount || 0;
                    }
                });
                document.getElementById('ads-watched-today').textContent = totalAds;
            });
        }

        // Setup real-time listeners for Pro Jobs
        function setupProJobListeners() {
            // Listen for new Pro Job submissions
            const proJobsQuery = query(collection(db, "pro_jobs_submissions"), orderBy("submittedAt", "desc"));
            
            onSnapshot(proJobsQuery, (snapshot) => {
                loadProJobSubmissions(); // Reload when new submissions are added
            });
        }

        function loadUsers() {
            const usersTableBody = document.getElementById('users-table-body');
            onSnapshot(collection(db, "users"), (snapshot) => {
                usersTableBody.innerHTML = '';
                snapshot.forEach(doc => {
                    const user = doc.data();
                    const isBlocked = user.isBlocked || false;
                    const row = `<tr>
                        <td>${user.name || 'N/A'}</td><td>${user.email}</td><td>${user.balance || 0}</td>
                        <td><span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${isBlocked ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'}">${isBlocked ? 'Blocked' : 'Active'}</span></td>
                        <td><button class="btn text-xs ${isBlocked ? 'btn-success' : 'btn-danger'}" onclick="window.toggleBlockUser('${doc.id}', ${isBlocked})">${isBlocked ? 'Unblock' : 'Block'}</button></td>
                        <td><button class="btn btn-warning text-xs" onclick="window.openBalanceEditModal('${doc.id}', '${user.name || 'N/A'}', ${user.balance || 0})">Edit Balance</button></td>
                    </tr>`;
                    usersTableBody.innerHTML += row;
                });
            });
        }

        function loadWithdrawals() {
            const withdrawalsTableBody = document.getElementById('withdrawals-table-body');
            onSnapshot(query(collection(db, "withdrawals"), where("status", "==", "pending")), (snapshot) => {
                withdrawalsTableBody.innerHTML = '';
                snapshot.forEach(docSnap => {
                    const request = docSnap.data();
                    const requestedDate = request.requestedAt?.toDate().toLocaleString() || 'N/A';
                    const row = `<tr>
                        <td>${request.userName || 'N/A'}</td><td>${request.amount}</td><td>${request.method}</td>
                        <td>${request.paymentDetail || 'N/A'}</td><td>${requestedDate}</td>
                        <td class="space-x-2">
                            <button class="btn btn-success text-xs" onclick="window.handleWithdrawal('${docSnap.id}', 'approved')">Approve</button>
                            <button class="btn btn-danger text-xs" onclick="window.handleWithdrawal('${docSnap.id}', 'rejected')">Reject</button>
                        </td>
                    </tr>`;
                    withdrawalsTableBody.innerHTML += row;
                });
            });
        }

        window.handleWithdrawal = (requestId, newStatus) => {
            showConfirm(`Kya aap is request ko ${newStatus} karna chahte hain?`, async () => {
                const requestRef = doc(db, "withdrawals", requestId);
                try {
                    const requestSnap = await getDoc(requestRef);
                    if (!requestSnap.exists()) {
                        showAlert("Request nahi mila.");
                        return;
                    }
                    
                    const requestData = requestSnap.data();
                    
                    if (newStatus === 'rejected') {
                        const userRef = doc(db, "users", requestData.userId);
                        const userSnap = await getDoc(userRef);
                        if(userSnap.exists()){
                           const currentBalance = userSnap.data().balance || 0;
                           await updateDoc(userRef, { balance: currentBalance + requestData.amount });
                        }
                    }
                    
                    await updateDoc(requestRef, { 
                        status: newStatus,
                        processedAt: new Date(),
                        processedBy: 'admin'
                    });
                    
                    showAlert(`Request ${newStatus} ho gayi hai.`);
                    loadWithdrawals(); // Refresh the withdrawals list
                } catch (error) { 
                    showAlert(`Error: ${error.message}`); 
                }
            });
        };

        async function loadJobsAnalytics() {
            try {
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                const todayStr = today.toISOString().split('T')[0];

                // Load today's job completions
                const jobsQuery = query(
                    collection(db, "daily_jobs_completed"),
                    where("completedAt", ">=", today)
                );
                const jobsSnapshot = await getDocs(jobsQuery);
                
                document.getElementById('analytics-jobs-today').textContent = jobsSnapshot.size;
                
                let totalCoins = 0;
                const userActivity = {};
                
                jobsSnapshot.forEach(doc => {
                    const job = doc.data();
                    totalCoins += job.coinsEarned || 0;
                    
                    if (!userActivity[job.userId]) {
                        userActivity[job.userId] = {
                            userName: job.userName || 'Unknown',
                            jobsCompleted: 0,
                            coinsEarned: 0,
                            lastActivity: job.completedAt
                        };
                    }
                    userActivity[job.userId].jobsCompleted++;
                    userActivity[job.userId].coinsEarned += job.coinsEarned || 0;
                    if (job.completedAt > userActivity[job.userId].lastActivity) {
                        userActivity[job.userId].lastActivity = job.completedAt;
                    }
                });
                
                document.getElementById('analytics-coins-today').textContent = totalCoins;
                document.getElementById('analytics-active-users').textContent = Object.keys(userActivity).length;

                // Load user ads count
                const usersSnapshot = await getDocs(collection(db, "users"));
                let totalAds = 0;
                
                usersSnapshot.forEach(doc => {
                    const userData = doc.data();
                    if (userData.lastAdWatchDate === todayStr) {
                        totalAds += userData.dailyAdCount || 0;
                        if (userActivity[doc.id]) {
                            userActivity[doc.id].adsWatched = userData.dailyAdCount || 0;
                        }
                    }
                });
                
                document.getElementById('analytics-ads-today').textContent = totalAds;

                // Populate user activity table
                const userActivityTableBody = document.getElementById('user-activity-table-body');
                userActivityTableBody.innerHTML = '';
                
                Object.entries(userActivity).forEach(([userId, activity]) => {
                    const lastActivity = activity.lastActivity ? activity.lastActivity.toDate().toLocaleTimeString() : 'N/A';
                    const row = `<tr>
                        <td>${activity.userName}</td>
                        <td>${activity.jobsCompleted}</td>
                        <td>${activity.adsWatched || 0}</td>
                        <td>${activity.coinsEarned}</td>
                        <td>${lastActivity}</td>
                    </tr>`;
                    userActivityTableBody.innerHTML += row;
                });

                // Load recent job completions
                const recentJobsQuery = query(
                    collection(db, "daily_jobs_completed"),
                    orderBy("completedAt", "desc"),
                    limit(20)
                );
                const recentJobsSnapshot = await getDocs(recentJobsQuery);
                
                const recentJobsTableBody = document.getElementById('recent-jobs-table-body');
                recentJobsTableBody.innerHTML = '';
                
                recentJobsSnapshot.forEach(doc => {
                    const job = doc.data();
                    const completedAt = job.completedAt ? job.completedAt.toDate().toLocaleString() : 'N/A';
                    const row = `<tr>
                        <td>${job.userName || 'Unknown'}</td>
                        <td>${job.jobId}</td>
                        <td>${job.coinsEarned || 0}</td>
                        <td>${completedAt}</td>
                    </tr>`;
                    recentJobsTableBody.innerHTML += row;
                });

            } catch (error) {
                console.error('Error loading jobs analytics:', error);
            }
        }

        async function loadSettings() {
            const configRef = doc(db, "config", "main");
            const docSnap = await getDoc(configRef);
            if (docSnap.exists()) {
                const config = docSnap.data();
                document.getElementById('min-withdrawal').value = config.minWithdrawal || '';
                document.getElementById('daily-ad-limit').value = config.dailyAdLimit || '';
                document.getElementById('coin-value-coins').value = config.coinValueCoins || '';
                document.getElementById('coin-value-inr').value = config.coinValueInr || '';
                document.getElementById('payment-methods').value = (config.paymentMethods || []).join(',');
            }
            
            await loadDailyJobLinks();
        }

        async function loadDailyJobLinks() {
            try {
                const jobLinksRef = doc(db, "config", "daily_job_links");
                const docSnap = await getDoc(jobLinksRef);
                const jobLinks = docSnap.exists() ? docSnap.data() : {};
                
                // Create input fields for jobs 1-10
                const container1 = document.getElementById('job-links-1-10');
                container1.innerHTML = '';
                for (let i = 1; i <= 10; i++) {
                    const jobDiv = document.createElement('div');
                    jobDiv.innerHTML = `
                        <label class="block text-sm font-medium mb-1">Job ${i} Link</label>
                        <input type="url" id="job-link-${i}" class="w-full px-3 py-2 border rounded-lg text-sm" 
                               placeholder="https://example.com" value="${jobLinks[`job${i}`] || ''}">
                    `;
                    container1.appendChild(jobDiv);
                }
                
                // Create input fields for jobs 11-20
                const container2 = document.getElementById('job-links-11-20');
                container2.innerHTML = '';
                for (let i = 11; i <= 20; i++) {
                    const jobDiv = document.createElement('div');
                    jobDiv.innerHTML = `
                        <label class="block text-sm font-medium mb-1">Job ${i} Link</label>
                        <input type="url" id="job-link-${i}" class="w-full px-3 py-2 border rounded-lg text-sm" 
                               placeholder="https://example.com" value="${jobLinks[`job${i}`] || ''}">
                    `;
                    container2.appendChild(jobDiv);
                }
            } catch (error) {
                console.error('Error loading job links:', error);
            }
        }

        async function saveDailyJobLinks() {
            try {
                const jobLinks = {};
                
                // Collect all job links
                for (let i = 1; i <= 20; i++) {
                    const linkInput = document.getElementById(`job-link-${i}`);
                    if (linkInput && linkInput.value.trim()) {
                        jobLinks[`job${i}`] = linkInput.value.trim();
                    }
                }
                
                // Save to Firebase
                const jobLinksRef = doc(db, "config", "daily_job_links");
                await setDoc(jobLinksRef, jobLinks);
                
                showAlert("Daily job links safaltapoorvak save ho gayi hain!");
            } catch (error) {
                showAlert(`Job links save karne mein error: ${error.message}`);
            }
        }

        async function clearAllJobLinks() {
            showConfirm("Kya aap sabhi job links clear karna chahte hain?", async () => {
                try {
                    // Clear from Firebase
                    const jobLinksRef = doc(db, "config", "daily_job_links");
                    await setDoc(jobLinksRef, {});
                    
                    // Clear input fields
                    for (let i = 1; i <= 20; i++) {
                        const linkInput = document.getElementById(`job-link-${i}`);
                        if (linkInput) {
                            linkInput.value = '';
                        }
                    }
                    
                    showAlert("Sabhi job links clear ho gayi hain!");
                } catch (error) {
                    showAlert(`Job links clear karne mein error: ${error.message}`);
                }
            });
        }

        window.toggleBlockUser = (userId, isBlocked) => {
            const action = isBlocked ? 'unblock' : 'block';
            showConfirm(`Kya aap is user ko ${action} karna chahte hain?`, async () => {
                const userRef = doc(db, "users", userId);
                try {
                    await updateDoc(userRef, { isBlocked: !isBlocked });
                    showAlert(`User safaltapoorvak ${action}ed ho gaya hai.`);
                } catch (error) { showAlert(`Error: ${error.message}`); }
            });
        };

        async function sendNotification() {
            const title = document.getElementById('notification-title').value;
            const message = document.getElementById('notification-message').value;
            if (!title || !message) return showAlert("Title aur message dono zaroori hain.");
            try {
                await addDoc(collection(db, "notifications"), { title, message, createdAt: serverTimestamp() });
                showAlert("Notification sabhi users ko bhej di gayi hai!");
                document.getElementById('notification-title').value = '';
                document.getElementById('notification-message').value = '';
            } catch (error) { showAlert(`Error: ${error.message}`); }
        }

        async function saveSettings() {
            const minWithdrawal = parseInt(document.getElementById('min-withdrawal').value);
            const dailyAdLimit = parseInt(document.getElementById('daily-ad-limit').value);
            const coinValueCoins = parseInt(document.getElementById('coin-value-coins').value);
            const coinValueInr = parseInt(document.getElementById('coin-value-inr').value);
            const paymentMethods = document.getElementById('payment-methods').value.split(',').map(s => s.trim()).filter(Boolean);
            if (isNaN(minWithdrawal) || isNaN(dailyAdLimit) || isNaN(coinValueCoins) || isNaN(coinValueInr)) return showAlert("Kripya sabhi number fields mein valid number daalein.");
            try {
                await setDoc(doc(db, "config", "main"), { minWithdrawal, dailyAdLimit, coinValueCoins, coinValueInr, paymentMethods }, { merge: true });
                showAlert("Settings safaltapoorvak save ho gayi hain!");
            } catch (error) { showAlert(`Settings save karne mein error: ${error.message}`); }
        }
        
        function showAlert(message) {
            document.getElementById('alert-message').textContent = message;
            document.getElementById('custom-alert').classList.remove('hidden');
            document.getElementById('alert-ok-btn').onclick = () => { document.getElementById('custom-alert').classList.add('hidden'); };
        }

        function showConfirm(message, onConfirm) {
            const confirmModal = document.getElementById('custom-confirm');
            const confirmMessage = document.getElementById('confirm-message');
            const confirmOkBtn = document.getElementById('confirm-ok-btn');
            const confirmCancelBtn = document.getElementById('confirm-cancel-btn');

            confirmMessage.textContent = message;
            confirmModal.classList.remove('hidden');

            const okListener = () => {
                onConfirm();
                confirmModal.classList.add('hidden');
                confirmOkBtn.removeEventListener('click', okListener);
                confirmCancelBtn.removeEventListener('click', cancelListener);
            };

            const cancelListener = () => {
                confirmModal.classList.add('hidden');
                confirmOkBtn.removeEventListener('click', okListener);
                confirmCancelBtn.removeEventListener('click', cancelListener);
            };

            confirmOkBtn.addEventListener('click', okListener);
            confirmCancelBtn.addEventListener('click', cancelListener);
        }

        window.openBalanceEditModal = (userId, userName, currentBalance) => {
            document.getElementById('edit-balance-username').value = userName;
            document.getElementById('edit-balance-current').value = currentBalance;
            document.getElementById('edit-balance-new').value = currentBalance;
            document.getElementById('edit-balance-reason').value = '';
            document.getElementById('balance-edit-modal').classList.remove('hidden');
            
            // Store userId for later use
            document.getElementById('balance-edit-modal').dataset.userId = userId;
        };

        function closeBalanceEditModal() {
            document.getElementById('balance-edit-modal').classList.add('hidden');
        }

        async function saveUserBalance() {
            const userId = document.getElementById('balance-edit-modal').dataset.userId;
            const userName = document.getElementById('edit-balance-username').value;
            const currentBalance = parseInt(document.getElementById('edit-balance-current').value);
            const newBalance = parseInt(document.getElementById('edit-balance-new').value);
            const reason = document.getElementById('edit-balance-reason').value;

            if (isNaN(newBalance) || newBalance < 0) {
                showAlert("Kripya valid balance enter karein (0 ya usse zyada).");
                return;
            }

            const balanceChange = newBalance - currentBalance;
            const changeType = balanceChange > 0 ? 'increased' : balanceChange < 0 ? 'decreased' : 'unchanged';

            if (balanceChange === 0) {
                showAlert("Balance mein koi change nahi hai.");
                return;
            }

            showConfirm(`Kya aap ${userName} ka balance ${currentBalance} se ${newBalance} karna chahte hain? (${changeType} by ${Math.abs(balanceChange)})`, async () => {
                try {
                    const userRef = doc(db, "users", userId);
                    await updateDoc(userRef, { 
                        balance: newBalance,
                        lastBalanceUpdate: serverTimestamp(),
                        lastBalanceUpdateBy: 'admin'
                    });

                    // Log the balance change for audit trail
                    await addDoc(collection(db, "balance_changes"), {
                        userId: userId,
                        userName: userName,
                        previousBalance: currentBalance,
                        newBalance: newBalance,
                        changeAmount: balanceChange,
                        reason: reason || 'Admin adjustment',
                        changedBy: 'admin',
                        changedAt: serverTimestamp()
                    });

                    showAlert(`${userName} ka balance safaltapoorvak update ho gaya hai!`);
                    closeBalanceEditModal();
                } catch (error) {
                    showAlert(`Balance update karne mein error: ${error.message}`);
                }
            });
        }

        async function loadWithdrawalHistory() {
            try {
                const historyQuery = query(
                    collection(db, "withdrawals"),
                    where("status", "in", ["approved", "rejected"])
                );
                
                onSnapshot(historyQuery, (snapshot) => {
                    const withdrawalHistoryTableBody = document.getElementById('withdrawal-history-table-body');
                    const userSummary = {};
                    let totalWithdrawals = 0;
                    let approvedCount = 0;
                    let rejectedCount = 0;
                    let totalAmountPaid = 0;
                    
                    if (withdrawalHistoryTableBody) {
                        withdrawalHistoryTableBody.innerHTML = '';
                    }
                    
                    const withdrawals = [];
                    snapshot.forEach(doc => {
                        const withdrawal = { id: doc.id, ...doc.data() };
                        withdrawals.push(withdrawal);
                    });
                    
                    // Sort by processedAt descending
                    withdrawals.sort((a, b) => {
                        const aTime = a.processedAt instanceof Date ? a.processedAt : (a.processedAt?.toDate() || new Date(0));
                        const bTime = b.processedAt instanceof Date ? b.processedAt : (b.processedAt?.toDate() || new Date(0));
                        return bTime - aTime;
                    });
                    
                    withdrawals.forEach(withdrawal => {
                        totalWithdrawals++;
                        
                        if (withdrawal.status === 'approved') {
                            approvedCount++;
                            totalAmountPaid += withdrawal.amount || 0;
                        } else if (withdrawal.status === 'rejected') {
                            rejectedCount++;
                        }
                        
                        // Update user summary
                        const userId = withdrawal.userId;
                        if (!userSummary[userId]) {
                            userSummary[userId] = {
                                userName: withdrawal.userName || 'Unknown',
                                total: 0,
                                approved: 0,
                                rejected: 0,
                                totalAmount: 0,
                                withdrawals: []
                            };
                        }
                        
                        userSummary[userId].total++;
                        userSummary[userId].withdrawals.push(withdrawal);
                        
                        if (withdrawal.status === 'approved') {
                            userSummary[userId].approved++;
                            userSummary[userId].totalAmount += withdrawal.amount || 0;
                        } else if (withdrawal.status === 'rejected') {
                            userSummary[userId].rejected++;
                        }
                        
                        // Add to history table
                        if (withdrawalHistoryTableBody) {
                            const requestedAt = withdrawal.requestedAt instanceof Date ? 
                                withdrawal.requestedAt.toLocaleString() : 
                                (withdrawal.requestedAt?.toDate().toLocaleString() || 'N/A');
                            const processedAt = withdrawal.processedAt instanceof Date ? 
                                withdrawal.processedAt.toLocaleString() : 
                                (withdrawal.processedAt?.toDate().toLocaleString() || 'N/A');
                            const statusClass = withdrawal.status === 'approved' ? 'text-green-600' : 'text-red-600';
                            
                            const row = `<tr>
                                <td>${withdrawal.userName || 'N/A'}</td>
                                <td>â‚¹${withdrawal.amount || 0}</td>
                                <td>${withdrawal.method || 'N/A'}</td>
                                <td>${withdrawal.paymentDetail || 'N/A'}</td>
                                <td><span class="font-semibold ${statusClass}">${withdrawal.status}</span></td>
                                <td>${requestedAt}</td>
                                <td>${processedAt}</td>
                            </tr>`;
                            withdrawalHistoryTableBody.innerHTML += row;
                        }
                    });
                    
                    // Update summary stats
                    const totalElement = document.getElementById('total-withdrawals-count');
                    const approvedElement = document.getElementById('approved-withdrawals-count');
                    const rejectedElement = document.getElementById('rejected-withdrawals-count');
                    const totalAmountElement = document.getElementById('total-amount-paid');
                    
                    if (totalElement) totalElement.textContent = totalWithdrawals;
                    if (approvedElement) approvedElement.textContent = approvedCount;
                    if (rejectedElement) rejectedElement.textContent = rejectedCount;
                    if (totalAmountElement) totalAmountElement.textContent = `â‚¹${totalAmountPaid}`;
                    
                    // Update user summary table
                    const userSummaryTableBody = document.getElementById('user-withdrawal-summary-body');
                    if (userSummaryTableBody) {
                        userSummaryTableBody.innerHTML = '';
                        
                        Object.entries(userSummary).forEach(([userId, summary]) => {
                            const row = `<tr>
                                <td>${summary.userName}</td>
                                <td>${summary.total}</td>
                                <td class="text-green-600 font-semibold">${summary.approved}</td>
                                <td class="text-red-600 font-semibold">${summary.rejected}</td>
                                <td>â‚¹${summary.totalAmount}</td>
                                <td>
                                    <button class="btn btn-primary text-xs" onclick="window.showUserWithdrawalDetails('${userId}', '${summary.userName}', ${JSON.stringify(summary.withdrawals).replace(/"/g, '&quot;')})">
                                        View Details
                                    </button>
                                </td>
                            </tr>`;
                            userSummaryTableBody.innerHTML += row;
                        });
                    }
                });
                
            } catch (error) {
                console.error('Error loading withdrawal history:', error);
            }
        }

        window.showUserWithdrawalDetails = (userId, userName, withdrawalsJson) => {
            try {
                const withdrawals = JSON.parse(withdrawalsJson.replace(/&quot;/g, '"'));
                
                document.getElementById('withdrawal-details-username').textContent = userName;
                
                const detailsTableBody = document.getElementById('user-withdrawal-details-body');
                detailsTableBody.innerHTML = '';
                
                withdrawals.forEach(withdrawal => {
                    const requestedAt = withdrawal.requestedAt?.toDate ? withdrawal.requestedAt.toDate().toLocaleString() : 'N/A';
                    const processedAt = withdrawal.processedAt?.toDate ? withdrawal.processedAt.toDate().toLocaleString() : 'N/A';
                    const statusClass = withdrawal.status === 'approved' ? 'text-green-600' : 'text-red-600';
                    
                    const row = `<tr>
                        <td>â‚¹${withdrawal.amount || 0}</td>
                        <td>${withdrawal.method || 'N/A'}</td>
                        <td><span class="font-semibold ${statusClass}">${withdrawal.status}</span></td>
                        <td>${requestedAt}</td>
                        <td>${processedAt}</td>
                    </tr>`;
                    detailsTableBody.innerHTML += row;
                });
                
                document.getElementById('user-withdrawal-details-modal').classList.remove('hidden');
                lucide.createIcons();
            } catch (error) {
                showAlert('User details load karne mein error.');
            }
        };

        function closeWithdrawalDetailsModal() {
            document.getElementById('user-withdrawal-details-modal').classList.add('hidden');
        }

        // Pro Jobs Management Functions
        async function loadProJobs() {
            await loadProJobLinks();
            await loadProJobSubmissions();
        }

        async function loadProJobLinks() {
            try {
                const proJobLinksRef = doc(db, "config", "pro_job_links");
                const docSnap = await getDoc(proJobLinksRef);
                const proJobLinks = docSnap.exists() ? docSnap.data() : {};
                
                // Create input fields for pro jobs 1-5
                const container1 = document.getElementById('pro-job-links-1-5');
                container1.innerHTML = '';
                for (let i = 1; i <= 5; i++) {
                    const jobDiv = document.createElement('div');
                    jobDiv.innerHTML = `
                        <label class="block text-sm font-medium mb-1">Pro Job ${i} Link</label>
                        <input type="url" id="pro-job-link-${i}" class="w-full px-3 py-2 border rounded-lg text-sm" 
                               placeholder="https://example.com" value="${proJobLinks[`projob${i}`] || ''}">
                    `;
                    container1.appendChild(jobDiv);
                }
                
                // Create input fields for pro jobs 6-10
                const container2 = document.getElementById('pro-job-links-6-10');
                container2.innerHTML = '';
                for (let i = 6; i <= 10; i++) {
                    const jobDiv = document.createElement('div');
                    jobDiv.innerHTML = `
                        <label class="block text-sm font-medium mb-1">Pro Job ${i} Link</label>
                        <input type="url" id="pro-job-link-${i}" class="w-full px-3 py-2 border rounded-lg text-sm" 
                               placeholder="https://example.com" value="${proJobLinks[`projob${i}`] || ''}">
                    `;
                    container2.appendChild(jobDiv);
                }
            } catch (error) {
                console.error('Error loading pro job links:', error);
            }
        }

        async function saveProJobLinks() {
            try {
                const proJobLinks = {};
                
                // Collect all pro job links
                for (let i = 1; i <= 10; i++) {
                    const linkInput = document.getElementById(`pro-job-link-${i}`);
                    if (linkInput && linkInput.value.trim()) {
                        proJobLinks[`projob${i}`] = linkInput.value.trim();
                    }
                }
                
                // Save to Firebase
                const proJobLinksRef = doc(db, "config", "pro_job_links");
                await setDoc(proJobLinksRef, proJobLinks);
                
                showAlert("Pro job links safaltapoorvak save ho gayi hain!");
            } catch (error) {
                showAlert(`Pro job links save karne mein error: ${error.message}`);
            }
        }

        async function clearAllProJobLinks() {
            showConfirm("Kya aap sabhi pro job links clear karna chahte hain?", async () => {
                try {
                    // Clear from Firebase
                    const proJobLinksRef = doc(db, "config", "pro_job_links");
                    await setDoc(proJobLinksRef, {});
                    
                    // Clear input fields
                    for (let i = 1; i <= 10; i++) {
                        const linkInput = document.getElementById(`pro-job-link-${i}`);
                        if (linkInput) {
                            linkInput.value = '';
                        }
                    }
                    
                    showAlert("Sabhi pro job links clear ho gayi hain!");
                } catch (error) {
                    showAlert(`Pro job links clear karne mein error: ${error.message}`);
                }
            });
        }

        async function loadProJobSubmissions() {
            try {
                // Load pending submissions
                const pendingQuery = query(
                    collection(db, "pro_jobs_submissions"),
                    where("status", "==", "pending"),
                    orderBy("submittedAt", "desc")
                );
                
                const pendingSnapshot = await getDocs(pendingQuery);
                const pendingProJobsBody = document.getElementById('pending-pro-jobs-body');
                pendingProJobsBody.innerHTML = '';
                
                let pendingCount = 0;
                
                pendingSnapshot.forEach(doc => {
                    const submission = doc.data();
                    pendingCount++;
                    
                    const submittedAt = submission.submittedAt?.toDate().toLocaleString() || 'N/A';
                    
                    const row = `<tr>
                        <td>${submission.userName || 'N/A'}</td>
                        <td>${submission.jobId}</td>
                        <td><a href="${submission.beforeScreenshot}" target="_blank" class="text-blue-600 hover:underline">View</a></td>
                        <td><a href="${submission.afterScreenshot}" target="_blank" class="text-blue-600 hover:underline">View</a></td>
                        <td>${submittedAt}</td>
                        <td>
                            <button class="btn btn-info text-xs" onclick="viewProJobScreenshots('${doc.id}')">View Details</button>
                        </td>
                    </tr>`;
                    pendingProJobsBody.innerHTML += row;
                });
                
                document.getElementById('pending-pro-jobs-count').textContent = pendingCount;
                
                // Load all submissions for stats
                const allQuery = query(
                    collection(db, "pro_jobs_submissions"),
                    orderBy("submittedAt", "desc")
                );
                
                const allSnapshot = await getDocs(allQuery);
                const allProJobsBody = document.getElementById('all-pro-jobs-body');
                allProJobsBody.innerHTML = '';
                
                let totalCount = 0;
                let approvedCount = 0;
                let rejectedCount = 0;
                
                allSnapshot.forEach(doc => {
                    const submission = doc.data();
                    totalCount++;
                    
                    if (submission.status === 'approved') approvedCount++;
                    if (submission.status === 'rejected') rejectedCount++;
                    
                    const submittedAt = submission.submittedAt?.toDate().toLocaleString() || 'N/A';
                    const processedAt = submission.processedAt?.toDate().toLocaleString() || 'N/A';
                    
                    let statusBadge = '';
                    if (submission.status === 'pending') {
                        statusBadge = '<span class="status-pending">Pending</span>';
                    } else if (submission.status === 'approved') {
                        statusBadge = '<span class="status-approved">Approved</span>';
                    } else if (submission.status === 'rejected') {
                        statusBadge = '<span class="status-rejected">Rejected</span>';
                    }
                    
                    const row = `<tr>
                        <td>${submission.userName || 'N/A'}</td>
                        <td>${submission.jobId}</td>
                        <td>${statusBadge}</td>
                        <td>${submittedAt}</td>
                        <td>${processedAt}</td>
                        <td>
                            <button class="btn btn-info text-xs" onclick="viewProJobScreenshots('${doc.id}')">View Details</button>
                        </td>
                    </tr>`;
                    allProJobsBody.innerHTML += row;
                });
                
                document.getElementById('total-pro-jobs-count').textContent = totalCount;
                document.getElementById('approved-pro-jobs-count').textContent = approvedCount;
                document.getElementById('rejected-pro-jobs-count').textContent = rejectedCount;
                
            } catch (error) {
                console.error('Error loading pro job submissions:', error);
            }
        }

        window.viewProJobScreenshots = async function(submissionId) {
            try {
                const submissionRef = doc(db, "pro_jobs_submissions", submissionId);
                const submissionSnap = await getDoc(submissionRef);
                
                if (submissionSnap.exists()) {
                    const submissionData = submissionSnap.data();
                    currentProJobSubmission = {
                        id: submissionId,
                        ...submissionData
                    };
                    
                    document.getElementById('pro-job-user-name').textContent = submissionData.userName || 'N/A';
                    document.getElementById('pro-job-id').textContent = submissionData.jobId;
                    
                    // Set screenshot images and links
                    document.getElementById('before-screenshot-img').src = submissionData.beforeScreenshot;
                    document.getElementById('before-screenshot-link').href = submissionData.beforeScreenshot;
                    document.getElementById('after-screenshot-img').src = submissionData.afterScreenshot;
                    document.getElementById('after-screenshot-link').href = submissionData.afterScreenshot;
                    
                    document.getElementById('pro-job-screenshots-modal').classList.remove('hidden');
                } else {
                    showAlert("Submission data not found.");
                }
            } catch (error) {
                console.error('Error loading pro job submission:', error);
                showAlert("Error loading submission details.");
            }
        };

        window.closeProJobScreenshotsModal = function() {
            document.getElementById('pro-job-screenshots-modal').classList.add('hidden');
            currentProJobSubmission = null;
        };

        window.approveProJobSubmission = async function() {
            if (!currentProJobSubmission) return;
            
            showConfirm("Kya aap is pro job submission ko approve karna chahte hain? User ko 100 coins milege.", async () => {
                try {
                    const submissionRef = doc(db, "pro_jobs_submissions", currentProJobSubmission.id);
                    
                    // Update submission status
                    await updateDoc(submissionRef, {
                        status: 'approved',
                        processedAt: serverTimestamp(),
                        processedBy: 'admin'
                    });
                    
                    // Add 100 coins to user's balance
                    const userRef = doc(db, "users", currentProJobSubmission.userId);
                    const userSnap = await getDoc(userRef);
                    
                    if (userSnap.exists()) {
                        const userData = userSnap.data();
                        const newBalance = (userData.balance || 0) + 100;
                        
                        await updateDoc(userRef, {
                            balance: newBalance
                        });
                        
                        // Log the balance change
                        await addDoc(collection(db, "balance_changes"), {
                            userId: currentProJobSubmission.userId,
                            userName: currentProJobSubmission.userName,
                            previousBalance: userData.balance || 0,
                            newBalance: newBalance,
                            changeAmount: 100,
                            reason: 'Pro job approval',
                            changedBy: 'admin',
                            changedAt: serverTimestamp()
                        });
                    }
                    
                    showAlert("Pro job submission approve ho gaya hai! User ko 100 coins mile hain.");
                    closeProJobScreenshotsModal();
                    loadProJobSubmissions();
                } catch (error) {
                    console.error('Error approving pro job submission:', error);
                    showAlert("Error approving submission.");
                }
            });
        };

        window.rejectProJobSubmission = async function() {
            if (!currentProJobSubmission) return;
            
            showConfirm("Kya aap is pro job submission ko reject karna chahte hain?", async () => {
                try {
                    const submissionRef = doc(db, "pro_jobs_submissions", currentProJobSubmission.id);
                    
                    // Update submission status
                    await updateDoc(submissionRef, {
                        status: 'rejected',
                        processedAt: serverTimestamp(),
                        processedBy: 'admin'
                    });
                    
                    showAlert("Pro job submission reject ho gaya hai.");
                    closeProJobScreenshotsModal();
                    loadProJobSubmissions();
                } catch (error) {
                    console.error('Error rejecting pro job submission:', error);
                    showAlert("Error rejecting submission.");
                }
            });
        };

    </script>
</body>
</html>